import { ENUM_RUN_STATE } from "../zego.entity";
import { HeartBeatHandler } from "./heartBeatHandler";
import { RoomHandler } from "./roomHandler";
import { StateCenter } from "../stateCenter";
import { UserHandler } from "./userHandler";
import { RetryRoomHandler } from "./retryRoomHandler";
import { ZegoExpressWebRTM } from "..";
import { LiveRoomHandler } from "./liveroomHandler";
import { ZegoRoomStateChangedReason, ZegoRoomConfig } from "../../../code/zh/ZegoExpressEntity.rtm";
import type { ZegoDataReport, ZegoLogger } from "zego-express-logger";
export declare class LiveRoomModules {
    roomID: string;
    private _zgp_stateCenter;
    private _zgp_logger;
    private dataReport;
    rtm: ZegoExpressWebRTM;
    private _zgp_liveRoomHandler;
    get logger(): ZegoLogger;
    get stateCenter(): StateCenter;
    get liveRoomHandler(): LiveRoomHandler;
    roomHandler: RoomHandler;
    heartBeatHandler: HeartBeatHandler;
    messageHandler?: any;
    liveHandler: any;
    userHandler: UserHandler;
    roomTryHandler?: RetryRoomHandler;
    runState: ENUM_RUN_STATE;
    lastRunState: ENUM_RUN_STATE;
    lastRoomState: "DISCONNECTED" | "CONNECTING" | "CONNECTED";
    roomState: "DISCONNECTED" | "CONNECTING" | "CONNECTED";
    roomReasonState: ZegoRoomStateChangedReason;
    roomSessionID: string;
    sessionID: string;
    longSid: any;
    longRoomSid: any;
    isMulti: boolean;
    token: string;
    thirdToken: string;
    loginTime: number;
    userStateUpdate: boolean;
    maxMemberCount: number;
    roomName: string;
    config: ZegoRoomConfig;
    isCancelLogin: boolean;
    get sessionExist(): boolean;
    get roomSidString(): string;
    get userSidString(): string;
    constructor(roomID: string, _zgp_stateCenter: StateCenter, _zgp_logger: ZegoLogger, dataReport: ZegoDataReport, rtm: ZegoExpressWebRTM, _zgp_liveRoomHandler: LiveRoomHandler);
    initMessageHandler(): void;
    initLiveHandler(): void;
    init(): void;
    bindHeatBeatHandler(): void;
    bindRoomHandler(): void;
    bindUserHandler(): void;
    bindMessageHandler(): void;
    bindLiveHandler(): void;
    private _HBResponse;
    private _zgp_roomLoginResponse;
    checkRoomSession(roomSessionID: any): any;
    private _zgp_handleMultiRoom;
    isLogin(): boolean;
    isLogout(): boolean;
    isTryLogin(): boolean;
    isDisConnect(): boolean;
    retryConnect(): void;
    retryRoom(retryNow?: boolean, needResetSession?: boolean): void;
    resetSessionInfo(): void;
    resetRoomSession(): void;
    resetUserSession(): void;
}
